// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Library Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 12/23/2023 1:21:26 PM (- $Rev: 12980 $, 706472656).

[
  uuid(D28A8F60-C8DD-11D3-89A9-444553540000), 
  version(1.0), 
  helpstring("Bold ObjectSpace Type Library")
    
]
library BoldComObjectSpace
{

  importlib("stdole2.tlb");

  interface IBoldElement;
  interface IBoldMetaElement;
  interface IBoldElementTypeInfo;
  interface IBoldTypeTypeInfo;
  interface IBoldClassTypeInfo;
  interface IBoldNilTypeInfo;
  interface IBoldListTypeInfo;
  interface IBoldAttributeTypeInfo;
  interface IBoldSystemTypeInfo;
  interface IBoldDomainElement;
  interface IBoldObject;
  interface IBoldMember;
  interface IBoldAttribute;
  interface IBoldObjectReference;
  interface IBoldListCore;
  interface IBoldList;
  interface IBoldObjectList;
  interface IBoldMemberList;
  interface IBoldSystem;
  interface IBoldBlob;
  interface IBoldElementHandle;


  [
    uuid(E8E2859A-0BAA-4DD9-8B26-A0AE5DEC87DF), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldElement: IDispatch
  {
    [id(0x00000065)]
    HRESULT _stdcall AddSmallSubscription([in] BSTR ClientId, [in] long SubscriberId, [in] long SmallEvents, [in] long RequestedEvent, [in] VARIANT_BOOL CancelOld);
    [id(0x00000066)]
    HRESULT _stdcall AddSubscription([in] BSTR ClientId, [in] long SubscriberId, [in] long Event, [in] long RequestedEvent, [in] VARIANT_BOOL CancelOld);
    [id(0x00000067)]
    HRESULT _stdcall AssignElement([in] IBoldElement* Element);
    [id(0x00000069)]
    HRESULT _stdcall CompareTo([in] IBoldElement* Element, [out, retval] long* Value);
    [id(0x0000006A)]
    HRESULT _stdcall CompareToAs([in] long CompareType, [in] IBoldElement* Element, [out, retval] long* Value);
    [id(0x0000006B)]
    HRESULT _stdcall DefaultSubscribe([in] BSTR ClientId, [in] long SubscriberId, [in] long RequestedEvent, [in] VARIANT_BOOL CancelOld);
    [id(0x0000006C)]
    HRESULT _stdcall EvaluateAndSubscribeToExpression([in] BSTR Expression, [in] BSTR ClientId, [in] long SubscriberId, [in] VARIANT_BOOL Resubscribe, [in] VARIANT_BOOL CancelOld, [out, retval] IBoldElement** Value);
    [id(0x0000006D)]
    HRESULT _stdcall EvaluateExpression([in] BSTR Expression, [out, retval] IBoldElement** Value);
    [id(0x0000006E)]
    HRESULT _stdcall EvaluateExpressionAsSessionIdList([in] BSTR Expression, [out, retval] VARIANT* Value);
    [id(0x0000006F)]
    HRESULT _stdcall EvaluateExpressionAsSessionIdListAndStringList([in] BSTR ListExpression, [in] BSTR ItemExpression, [in] long Representation, [out, retval] VARIANT* Value);
    [id(0x00000070)]
    HRESULT _stdcall EvaluateExpressionAsString([in] BSTR Expression, [in] long Representation, [out, retval] BSTR* Value);
    [id(0x00000071)]
    HRESULT _stdcall EvaluateExpressionAsStringList([in] BSTR Expression, [in] long Representation, [out, retval] VARIANT* Value);
    [id(0x00000072)]
    HRESULT _stdcall EvaluateExpressionsAsStringLists([in] VARIANT Expressions, [in] long Representation, [out, retval] VARIANT* Value);
    [id(0x00000073)]
    HRESULT _stdcall GetAsList([out, retval] IBoldList** Value);
    [id(0x00000074)]
    HRESULT _stdcall IsEqual([in] IBoldElement* Element, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000075)]
    HRESULT _stdcall IsEqualAs([in] long CompareType, [in] IBoldElement* Element, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000076)]
    HRESULT _stdcall MakeImmutable(void);
    [id(0x00000077)]
    HRESULT _stdcall SubscribeToExpression([in] BSTR Expression, [in] BSTR ClientId, [in] long SubscriberId, [in] VARIANT_BOOL Resubscribe, [in] VARIANT_BOOL CancelOld);
    [id(0x00000078)]
    HRESULT _stdcall SubscribeToStringRepresentation([in] long Representation, [in] BSTR ClientId, [in] long SubscriberId, [in] long RequestedEvent, [in] VARIANT_BOOL CancelOld);
    [id(0x00000079)]
    HRESULT _stdcall ValidateCharacter([in] BSTR Value, [in] long Representation, [out, retval] VARIANT_BOOL* Value1);
    [id(0x0000007A)]
    HRESULT _stdcall ValidateString([in] BSTR Value, [in] long Representation, [out, retval] VARIANT_BOOL* Value1);
    [propget, id(0x00000000)]
    HRESULT _stdcall AsString([out, retval] BSTR* Value);
    [propput, id(0x00000000)]
    HRESULT _stdcall AsString([in] BSTR Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall AsVariant([out, retval] VARIANT* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall AsVariant([in] VARIANT Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall BoldType([out, retval] IBoldElementTypeInfo** Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall BoldTypeName([out, retval] BSTR* Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall Mutable([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall StringRepresentation([in] long Representation, [out, retval] BSTR* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall StringRepresentation([in] long Representation, [in] BSTR Value);
    [propget, id(0xFFFFFFFC), restricted]
    HRESULT _stdcall _NewEnum([out, retval]  IUnknown** Value);
    [id(0x00000080)]
    HRESULT _stdcall MultiEvaluateExpressionAsStringList([in] VARIANT Elements, [in] BSTR Expression, [in] BSTR ClientId, [in] VARIANT SubscriberIds, [in] long Representation, [out, retval] VARIANT* Value);
    [propget, id(0x00000081)]
    HRESULT _stdcall HasAdaptee([out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(78994402-CA6E-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldMetaElement: IBoldElement
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall DelphiName([out, retval] BSTR* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ExpressionName([out, retval] BSTR* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ModelName([out, retval] BSTR* Value);
  };

  [
    uuid(78994404-CA6E-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldElementTypeInfo: IBoldMetaElement
  {
    [id(0x0000012D)]
    HRESULT _stdcall ConformsTo([in] IBoldElementTypeInfo* ElementTypeInfo, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall BoldValueType([out, retval] long* Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall SystemTypeInfo([out, retval] IBoldSystemTypeInfo** Value);
  };

  [
    uuid(68A9FC6D-D646-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldTypeTypeInfo: IBoldElementTypeInfo
  {
  };

  [
    uuid(969E6924-D4A6-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldClassTypeInfo: IBoldElementTypeInfo
  {
    [id(0x00000191)]
    HRESULT _stdcall LeastCommonSuperClass([in] IBoldClassTypeInfo* ClassTypeInfo, [out, retval] IBoldClassTypeInfo** Value);
    [propget, id(0x00000192)]
    HRESULT _stdcall Constraints([out, retval] VARIANT* Value);
    [propget, id(0x00000193)]
    HRESULT _stdcall FirstOwnMemberIndex([out, retval] long* Value);
    [propget, id(0x00000194)]
    HRESULT _stdcall HasSubClasses([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000195)]
    HRESULT _stdcall IsAbstract([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000196)]
    HRESULT _stdcall IsImported([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000197)]
    HRESULT _stdcall IsLinkClass([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000198)]
    HRESULT _stdcall IsPersistent([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000199)]
    HRESULT _stdcall ListTypeInfo([out, retval] IBoldListTypeInfo** Value);
    [propget, id(0x0000019A)]
    HRESULT _stdcall Stereotype([out, retval] BSTR* Value);
    [propget, id(0x0000019B)]
    HRESULT _stdcall SuperClassTypeInfo([out, retval] IBoldClassTypeInfo** Value);
    [propget, id(0x0000019C)]
    HRESULT _stdcall TaggedValue([in] BSTR Tag, [out, retval] BSTR* Value);
    [propget, id(0x0000019D)]
    HRESULT _stdcall TopSortedIndex([out, retval] long* Value);
  };

  [
    uuid(969E6926-D4A6-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldNilTypeInfo: IBoldClassTypeInfo
  {
  };

  [
    uuid(969E6928-D4A6-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldListTypeInfo: IBoldElementTypeInfo
  {
    [propget, id(0x00000191)]
    HRESULT _stdcall ListElementTypeInfo([out, retval] IBoldElementTypeInfo** Value);
  };

  [
    uuid(969E692A-D4A6-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldAttributeTypeInfo: IBoldElementTypeInfo
  {
    [propget, id(0x00000191)]
    HRESULT _stdcall SuperAttributeTypeInfo([out, retval] IBoldAttributeTypeInfo** Value);
  };

  [
    uuid(969E6922-D4A6-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldSystemTypeInfo: IBoldElementTypeInfo
  {
    [propget, id(0x00000191)]
    HRESULT _stdcall AttributeTypeInfoByExpressionName([in] BSTR Name, [out, retval] IBoldAttributeTypeInfo** Value);
    [propget, id(0x00000192)]
    HRESULT _stdcall AttributeTypes([out, retval]  IUnknown** Value);
    [propget, id(0x00000193)]
    HRESULT _stdcall ClassTypeInfoByExpressionName([in] BSTR Name, [out, retval] IBoldClassTypeInfo** Value);
    [propget, id(0x00000194)]
    HRESULT _stdcall ClassTypes([out, retval]  IUnknown** Value);
    [propget, id(0x00000195)]
    HRESULT _stdcall Constraints([out, retval] VARIANT* Value);
    [propget, id(0x00000196)]
    HRESULT _stdcall ElementTypeInfoByExpressionName([in] BSTR Name, [out, retval] IBoldElementTypeInfo** Value);
    [propget, id(0x00000197)]
    HRESULT _stdcall IsPersistent([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000198)]
    HRESULT _stdcall IsRunnable([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000199)]
    HRESULT _stdcall ListTypeInfoByElement([in] IBoldElementTypeInfo* ElementTypeInfo, [out, retval] IBoldListTypeInfo** Value);
    [propget, id(0x0000019A)]
    HRESULT _stdcall ListTypes([out, retval]  IUnknown** Value);
    [propget, id(0x0000019B)]
    HRESULT _stdcall MethodsInstalled([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000019C)]
    HRESULT _stdcall NilTypeInfo([out, retval] IBoldNilTypeInfo** Value);
    [propget, id(0x0000019D)]
    HRESULT _stdcall RootClassTypeInfo([out, retval] IBoldClassTypeInfo** Value);
    [propget, id(0x0000019E)]
    HRESULT _stdcall Stereotype([out, retval] BSTR* Value);
    [propget, id(0x0000019F)]
    HRESULT _stdcall TaggedValue([in] BSTR Tag, [out, retval] BSTR* Value);
    [propget, id(0x000001A0)]
    HRESULT _stdcall TopSortedClasses([out, retval]  IUnknown** Value);
    [propget, id(0x000001A1)]
    HRESULT _stdcall TypeTypeInfo([out, retval] IBoldTypeTypeInfo** Value);
    [propget, id(0x000001A2)]
    HRESULT _stdcall UseGeneratedCode([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000001A3)]
    HRESULT _stdcall ValueTypeNameList([out, retval]  IUnknown** Value);
  };

  [
    uuid(78994406-CA6E-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldDomainElement: IBoldElement
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall BoldDirty([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall BoldPersistent([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall DisplayName([out, retval] BSTR* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall OwningElement([out, retval] IBoldDomainElement** Value);
  };

  [
    uuid(7C5C21FF-D247-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldObject: IBoldDomainElement
  {
    [id(0x0000012D)]
    HRESULT _stdcall BoldMakePersistent(void);
    [id(0x0000012E)]
    HRESULT _stdcall CheckLinks([in] long Index, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000012F)]
    HRESULT _stdcall Delete(void);
    [id(0x00000130)]
    HRESULT _stdcall DiscardChanges(void);
    [id(0x00000131)]
    HRESULT _stdcall Invalidate(void);
    [id(0x00000132)]
    HRESULT _stdcall LinkObject([in] BSTR RoleName, [in] IBoldObject* BoldObject);
    [id(0x00000133)]
    HRESULT _stdcall UnlinkAll(void);
    [id(0x00000134)]
    HRESULT _stdcall UnlinkObject([in] BSTR RoleName, [in] IBoldObject* BoldObject);
    [propget, id(0x00000135)]
    HRESULT _stdcall BoldClassTypeInfo([out, retval] IBoldClassTypeInfo** Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall BoldExistenceState([out, retval] long* Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall BoldMemberCount([out, retval] long* Value);
    [propget, id(0x00000138)]
    HRESULT _stdcall BoldMember([in] VARIANT Index, [out, retval] IBoldMember** Value);
    [propget, id(0x00000139)]
    HRESULT _stdcall BoldMemberValue([in] VARIANT Index, [out, retval] VARIANT* Value);
    [propput, id(0x00000139)]
    HRESULT _stdcall BoldMemberValue([in] VARIANT Index, [in] VARIANT Value);
    [propget, id(0x0000013A)]
    HRESULT _stdcall BoldMemberValues([out, retval] VARIANT* Value);
    [propput, id(0x0000013A)]
    HRESULT _stdcall BoldMemberValues([in] VARIANT Value);
    [propget, id(0x0000013B)]
    HRESULT _stdcall BoldPersistenceState([out, retval] long* Value);
    [propget, id(0x0000013C)]
    HRESULT _stdcall BoldSystem([out, retval] IBoldSystem** Value);
    [propget, id(0x0000013D)]
    HRESULT _stdcall CanDelete([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000013E)]
    HRESULT _stdcall CanUpdate([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000013F)]
    HRESULT _stdcall SessionId([out, retval] VARIANT* Value);
  };

  [
    uuid(7C5C2201-D247-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldMember: IBoldDomainElement
  {
    [id(0x0000012D)]
    HRESULT _stdcall Clone([out, retval] IBoldMember** Value);
    [id(0x0000012E)]
    HRESULT _stdcall DiscardChanges(void);
    [id(0x0000012F)]
    HRESULT _stdcall EnsureContentsCurrent(void);
    [id(0x00000130)]
    HRESULT _stdcall Invalidate(void);
    [propget, id(0x00000131)]
    HRESULT _stdcall BoldMemberRTInfo([out, retval]  IUnknown** Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall BoldSystem([out, retval] IBoldSystem** Value);
    [propget, id(0x00000133)]
    HRESULT _stdcall CanModify([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000134)]
    HRESULT _stdcall CanRead([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000135)]
    HRESULT _stdcall Derived([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall IsPartOfSystem([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall OwningObject([out, retval] IBoldObject** Value);
  };

  [
    uuid(7C5C25A5-D247-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldAttribute: IBoldMember
  {
    [id(0x00000191)]
    HRESULT _stdcall SetToNull(void);
    [propget, id(0x00000192)]
    HRESULT _stdcall BoldAttributeRTInfo([out, retval]  IUnknown** Value);
    [propget, id(0x00000193)]
    HRESULT _stdcall CanSetToNull([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000194)]
    HRESULT _stdcall IsNull([out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(7C5C2608-D247-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldObjectReference: IBoldMember
  {
    [id(0x00000191)]
    HRESULT _stdcall CanSet([in] IBoldObject* NewObject, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000192)]
    HRESULT _stdcall BoldObject([out, retval] IBoldObject** Value);
    [propput, id(0x00000192)]
    HRESULT _stdcall BoldObject([in] IBoldObject* Value);
    [propget, id(0x00000193)]
    HRESULT _stdcall BoldRoleRTInfo([out, retval]  IUnknown** Value);
  };

  [
    uuid(4153813B-4DE9-4A17-B747-7091A839BBFA), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldListCore: IBoldMember
  {
    [id(0x00000191)]
    HRESULT _stdcall AddList([in] IBoldListCore* List);
    [id(0x00000192)]
    HRESULT _stdcall CanClear([out, retval] VARIANT_BOOL* Value);
    [id(0x00000193)]
    HRESULT _stdcall CanMove([in] long CurrentIndex, [in] long NewIndex, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000194)]
    HRESULT _stdcall CanRemove([in] long Index, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000195)]
    HRESULT _stdcall Clear(void);
    [id(0x00000196)]
    HRESULT _stdcall EnsureRange([in] long FromIndex, [in] long ToIndex);
    [id(0x00000197)]
    HRESULT _stdcall InsertNew([in] long Index);
    [id(0x00000198)]
    HRESULT _stdcall Move([in] long CurrentIndex, [in] long NewIndex);
    [id(0x00000199)]
    HRESULT _stdcall RemoveByIndex([in] long Index);
    [id(0x0000019A)]
    HRESULT _stdcall ToStringList([in] long Representation, [out, retval] VARIANT* Value);
    [id(0x0000019B)]
    HRESULT _stdcall ToStringListWithNil([in] long Representation, [in] BSTR NilString, [out, retval] VARIANT* Value);
    [propget, id(0x0000019C)]
    HRESULT _stdcall CanCreateNew([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000019D)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0x0000019E)]
    HRESULT _stdcall DuplicateMode([out, retval] long* Value);
    [propput, id(0x0000019E)]
    HRESULT _stdcall DuplicateMode([in] long Value);
  };

  [
    uuid(798895F6-E991-432B-9F37-7998BA769199), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldList: IBoldListCore
  {
    [id(0x000001F5)]
    HRESULT _stdcall Add([in] IBoldElement* Element);
    [id(0x000001F6)]
    HRESULT _stdcall AddNew([out, retval] IBoldElement** Value);
    [id(0x000001F7)]
    HRESULT _stdcall CanInsert([in] long Index, [in] IBoldElement* Element, [out, retval] VARIANT_BOOL* Value);
    [id(0x000001F8)]
    HRESULT _stdcall CanSet([in] long Index, [in] IBoldElement* Element, [out, retval] VARIANT_BOOL* Value);
    [id(0x000001F9)]
    HRESULT _stdcall Includes([in] IBoldElement* Element, [out, retval] VARIANT_BOOL* Value);
    [id(0x000001FA)]
    HRESULT _stdcall IndexOf([in] IBoldElement* Element, [out, retval] long* Value);
    [id(0x000001FB)]
    HRESULT _stdcall Insert([in] long Index, [in] IBoldElement* Element);
    [id(0x000001FC)]
    HRESULT _stdcall Remove([in] IBoldElement* Element);
    [propget, id(0x000001FD)]
    HRESULT _stdcall Elements([in] long Index, [out, retval] IBoldElement** Value);
    [propput, id(0x000001FD)]
    HRESULT _stdcall Elements([in] long Index, [in] IBoldElement* Value);
    [id(0x000001FE)]
    HRESULT _stdcall GetRAnge([in] long FromIndex, [in] long ToIndex, [out, retval] VARIANT* Value);
  };

  [
    uuid(75A31152-D30E-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldObjectList: IBoldList
  {
    [propget, id(0x00000259)]
    HRESULT _stdcall BoldObjects([in] long Index, [out, retval] IBoldObject** Value);
    [propput, id(0x00000259)]
    HRESULT _stdcall BoldObjects([in] long Index, [in] IBoldObject* Value);
    [propget, id(0x0000025A)]
    HRESULT _stdcall BoldRoleRTInfo([out, retval]  IUnknown** Value);
    [propget, id(0x0000025B)]
    HRESULT _stdcall SubscribeToObjectsInList([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000025B)]
    HRESULT _stdcall SubscribeToObjectsInList([in] VARIANT_BOOL Value);
  };

  [
    uuid(75A31154-D30E-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldMemberList: IBoldList
  {
    [propget, id(0x00000259)]
    HRESULT _stdcall BoldMembers([in] long Index, [out, retval] IBoldMember** Value);
    [propput, id(0x00000259)]
    HRESULT _stdcall BoldMembers([in] long Index, [in] IBoldMember* Value);
  };

  [
    uuid(8A530C40-D017-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldSystem: IBoldDomainElement
  {
    [id(0x0000012D)]
    HRESULT _stdcall CreateNewMember([in] BSTR ExpressionName, [out, retval] IBoldMember** Value);
    [id(0x0000012E)]
    HRESULT _stdcall CreateNewObject([in] BSTR ExpressionName, [in] VARIANT_BOOL Persistent, [out, retval] IBoldObject** Value);
    [id(0x0000012F)]
    HRESULT _stdcall CreateNewObjectWithMemberValues([in] BSTR ExpressionName, [in] VARIANT_BOOL Persistent, [in] VARIANT MemberValues, [out, retval] IBoldObject** Value);
    [id(0x00000130)]
    HRESULT _stdcall Discard(void);
    [id(0x00000131)]
    HRESULT _stdcall EnsureEnclosure([in] IBoldObjectList* ObjectList, [in] VARIANT_BOOL ValidateOnly, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000132)]
    HRESULT _stdcall GetObjectBySessionId([in] VARIANT SessionId, [out, retval] IBoldObject** Value);
    [id(0x00000133)]
    HRESULT _stdcall UpdateDatabase(void);
    [id(0x00000134)]
    HRESULT _stdcall UpdateDatabaseWithList([in] IBoldObjectList* ObjectList);
    [propget, id(0x00000135)]
    HRESULT _stdcall BoldSystemTypeInfo([out, retval] IBoldSystemTypeInfo** Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall ClassByExpressionName([in] BSTR ExpressionName, [out, retval] IBoldObjectList** Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall DirtyObjects([out, retval] IBoldObjectList** Value);
    [propget, id(0x00000138)]
    HRESULT _stdcall LoadedObjects([out, retval] IBoldObjectList** Value);
  };

  [
    uuid(68A9F8C2-D646-11D3-89A9-444553540000), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldBlob: IBoldAttribute
  {
  };

  [
    uuid(71446D80-01C9-4E3C-95A7-D74445C0776C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IBoldElementHandle: IDispatch
  {
    [id(0x00000065)]
    HRESULT _stdcall AddSmallSubscription([in] BSTR ClientId, [in] long SubscriberId, [in] long SmallEvents, [in] long RequestedEvent, [in] VARIANT_BOOL CancelOld);
    [id(0x00000066)]
    HRESULT _stdcall AddSubscription([in] BSTR ClientId, [in] long SubscriberId, [in] long Event, [in] long RequestedEvent, [in] VARIANT_BOOL CancelOld);
    [id(0x00000067)]
    HRESULT _stdcall GetData([in] long DataFlags, [out] IBoldElement** Value, [out] IBoldElementTypeInfo** DynamicBoldType, [out] IBoldElementTypeInfo** StaticBoldType, [out] IBoldSystemTypeInfo** StaticSystemType, [out] IBoldSystem** BoldSystem, [out] IBoldElementTypeInfo** StaticRootType, [out] IBoldObject** CurrentBoldObject, [out] IBoldList** BoldList, [out] IBoldElementTypeInfo** ListElementType, [out] VARIANT* NamedValues, [out, retval] VARIANT_BOOL* Value1);
    [id(0x00000068)]
    HRESULT _stdcall SetData([in] long DataFlags, [in] IBoldElement* Value, [in] VARIANT NamedValues, [out, retval] VARIANT_BOOL* Value1);
  };

};