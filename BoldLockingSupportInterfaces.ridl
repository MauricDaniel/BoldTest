// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Library Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 12/23/2023 1:21:26 PM (- $Rev: 12980 $, 706472812).

[
  uuid(0EE38CD0-5848-4A2F-96E6-BFE2007AC6BD), 
  version(1.0), 
  helpstring("Bold LockingSupport Interfaces Library")
    
]
library BoldLockingSupportInterfaces
{

  importlib("stdole2.tlb");

  interface IBoldLockManager;
  interface IBoldLockManagerAdmin;


  [
    uuid(105D857F-DD36-48F8-9554-ABCC212053ED), 
    version(1.0), 
    oleautomation
  ]
  interface IBoldLockManager: IUnknown
  {
    [id(0x00000001)]
    HRESULT _stdcall GetLocks([in] long ClientId, [in] long TimeOut, [in] VARIANT RequestedExclusiveLocks, [in] VARIANT RequestedSharedLocks, [out] VARIANT* HeldLocks, [out] VARIANT* ClientsHoldingRequestedLocks, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000002)]
    HRESULT _stdcall ReleaseLocks([in] long ClientId, [in] VARIANT Locks, [out, retval] HRESULT* Value);
    [id(0x00000003)]
    HRESULT _stdcall EnsureLocks([in] long ClientId, [in] VARIANT RequestedExclusiveLocks, [in] VARIANT RequestedSharedLocks, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(89074E8A-9A98-4D2A-A113-65F495611C6C), 
    version(1.0), 
    oleautomation
  ]
  interface IBoldLockManagerAdmin: IUnknown
  {
    [id(0x00000001)]
    HRESULT _stdcall ListAllClients([out] VARIANT* Clients, [out, retval] HRESULT* Value);
    [id(0x00000003)]
    HRESULT _stdcall RemoveLocksForClient([in] long ClientId, [in] VARIANT Locks, [out, retval] HRESULT* Value);
    [id(0x00000007)]
    HRESULT _stdcall KillClient([in] long ClientId, [out, retval] HRESULT* Value);
    [id(0x00000002)]
    HRESULT _stdcall LocksForClients([in] VARIANT ClientIds, [out] VARIANT* Locks, [out] VARIANT* LockDurations, [out, retval] HRESULT* Value);
    [id(0x00000006)]
    HRESULT _stdcall ListLockingClients([out] VARIANT* Clients, [out, retval] HRESULT* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall LockManagerSuspended([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall LockManagerSuspended([in] VARIANT_BOOL Value);
  };

};